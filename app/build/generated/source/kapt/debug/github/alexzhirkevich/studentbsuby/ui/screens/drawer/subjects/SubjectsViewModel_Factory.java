// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.ui.screens.drawer.subjects;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.repo.Repository;
import github.alexzhirkevich.studentbsuby.repo.SubjectsRepository;
import github.alexzhirkevich.studentbsuby.util.logger.Logger;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SubjectsViewModel_Factory implements Factory<SubjectsViewModel> {
  private final Provider<SubjectsRepository> subjectsRepositoryProvider;

  private final Provider<Repository<Integer>> currentSemesterRepositoryProvider;

  private final Provider<Logger> loggerProvider;

  public SubjectsViewModel_Factory(Provider<SubjectsRepository> subjectsRepositoryProvider,
      Provider<Repository<Integer>> currentSemesterRepositoryProvider,
      Provider<Logger> loggerProvider) {
    this.subjectsRepositoryProvider = subjectsRepositoryProvider;
    this.currentSemesterRepositoryProvider = currentSemesterRepositoryProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public SubjectsViewModel get() {
    return newInstance(subjectsRepositoryProvider.get(), currentSemesterRepositoryProvider.get(), loggerProvider.get());
  }

  public static SubjectsViewModel_Factory create(
      Provider<SubjectsRepository> subjectsRepositoryProvider,
      Provider<Repository<Integer>> currentSemesterRepositoryProvider,
      Provider<Logger> loggerProvider) {
    return new SubjectsViewModel_Factory(subjectsRepositoryProvider, currentSemesterRepositoryProvider, loggerProvider);
  }

  public static SubjectsViewModel newInstance(SubjectsRepository subjectsRepository,
      Repository<Integer> currentSemesterRepository, Logger logger) {
    return new SubjectsViewModel(subjectsRepository, currentSemesterRepository, logger);
  }
}
