// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import github.alexzhirkevich.studentbsuby.api.PaidServicesApi;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvidePaidServicesApiFactory implements Factory<PaidServicesApi> {
  private final RetrofitModule module;

  private final Provider<Retrofit> retrofitProvider;

  public RetrofitModule_ProvidePaidServicesApiFactory(RetrofitModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public PaidServicesApi get() {
    return providePaidServicesApi(module, retrofitProvider.get());
  }

  public static RetrofitModule_ProvidePaidServicesApiFactory create(RetrofitModule module,
      Provider<Retrofit> retrofitProvider) {
    return new RetrofitModule_ProvidePaidServicesApiFactory(module, retrofitProvider);
  }

  public static PaidServicesApi providePaidServicesApi(RetrofitModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.providePaidServicesApi(retrofit));
  }
}
