// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.ui.screens.drawer.news;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.repo.NewsRepository;
import github.alexzhirkevich.studentbsuby.util.LoginCookieManager;
import github.alexzhirkevich.studentbsuby.util.logger.Logger;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NewsViewModel_Factory implements Factory<NewsViewModel> {
  private final Provider<NewsRepository> newsRepoProvider;

  private final Provider<Logger> loggerProvider;

  private final Provider<OkHttpClient> httpClientProvider;

  private final Provider<LoginCookieManager> loginCookieManagerProvider;

  public NewsViewModel_Factory(Provider<NewsRepository> newsRepoProvider,
      Provider<Logger> loggerProvider, Provider<OkHttpClient> httpClientProvider,
      Provider<LoginCookieManager> loginCookieManagerProvider) {
    this.newsRepoProvider = newsRepoProvider;
    this.loggerProvider = loggerProvider;
    this.httpClientProvider = httpClientProvider;
    this.loginCookieManagerProvider = loginCookieManagerProvider;
  }

  @Override
  public NewsViewModel get() {
    return newInstance(newsRepoProvider.get(), loggerProvider.get(), httpClientProvider.get(), loginCookieManagerProvider.get());
  }

  public static NewsViewModel_Factory create(Provider<NewsRepository> newsRepoProvider,
      Provider<Logger> loggerProvider, Provider<OkHttpClient> httpClientProvider,
      Provider<LoginCookieManager> loginCookieManagerProvider) {
    return new NewsViewModel_Factory(newsRepoProvider, loggerProvider, httpClientProvider, loginCookieManagerProvider);
  }

  public static NewsViewModel newInstance(NewsRepository newsRepo, Logger logger,
      OkHttpClient httpClient, LoginCookieManager loginCookieManager) {
    return new NewsViewModel(newsRepo, logger, httpClient, loginCookieManager);
  }
}
