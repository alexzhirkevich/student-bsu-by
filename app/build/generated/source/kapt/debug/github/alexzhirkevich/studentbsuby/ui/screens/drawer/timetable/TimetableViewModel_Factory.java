// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.ui.screens.drawer.timetable;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.repo.TimetableRepository;
import github.alexzhirkevich.studentbsuby.util.logger.Logger;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TimetableViewModel_Factory implements Factory<TimetableViewModel> {
  private final Provider<TimetableRepository> timetableRepositoryProvider;

  private final Provider<Logger> loggerProvider;

  public TimetableViewModel_Factory(Provider<TimetableRepository> timetableRepositoryProvider,
      Provider<Logger> loggerProvider) {
    this.timetableRepositoryProvider = timetableRepositoryProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public TimetableViewModel get() {
    return newInstance(timetableRepositoryProvider.get(), loggerProvider.get());
  }

  public static TimetableViewModel_Factory create(
      Provider<TimetableRepository> timetableRepositoryProvider, Provider<Logger> loggerProvider) {
    return new TimetableViewModel_Factory(timetableRepositoryProvider, loggerProvider);
  }

  public static TimetableViewModel newInstance(TimetableRepository timetableRepository,
      Logger logger) {
    return new TimetableViewModel(timetableRepository, logger);
  }
}
