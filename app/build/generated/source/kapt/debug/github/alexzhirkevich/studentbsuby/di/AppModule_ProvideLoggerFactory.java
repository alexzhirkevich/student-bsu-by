// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.di;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import github.alexzhirkevich.studentbsuby.util.logger.Logger;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideLoggerFactory implements Factory<Logger> {
  private final AppModule module;

  private final Provider<Context> contextProvider;

  public AppModule_ProvideLoggerFactory(AppModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public Logger get() {
    return provideLogger(module, contextProvider.get());
  }

  public static AppModule_ProvideLoggerFactory create(AppModule module,
      Provider<Context> contextProvider) {
    return new AppModule_ProvideLoggerFactory(module, contextProvider);
  }

  public static Logger provideLogger(AppModule instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideLogger(context));
  }
}
