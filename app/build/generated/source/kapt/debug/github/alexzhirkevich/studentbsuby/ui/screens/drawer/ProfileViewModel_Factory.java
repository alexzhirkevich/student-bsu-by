// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.ui.screens.drawer;

import android.graphics.Bitmap;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.data.models.User;
import github.alexzhirkevich.studentbsuby.repo.LoginRepository;
import github.alexzhirkevich.studentbsuby.repo.Repository;
import github.alexzhirkevich.studentbsuby.util.logger.Logger;
import github.alexzhirkevich.studentbsuby.workers.SynchronizationWorkerManager;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProfileViewModel_Factory implements Factory<ProfileViewModel> {
  private final Provider<Repository<Bitmap>> photoRepositoryProvider;

  private final Provider<Repository<User>> userRepositoryProvider;

  private final Provider<LoginRepository> loginRepositoryProvider;

  private final Provider<Logger> loggerProvider;

  private final Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider;

  public ProfileViewModel_Factory(Provider<Repository<Bitmap>> photoRepositoryProvider,
      Provider<Repository<User>> userRepositoryProvider,
      Provider<LoginRepository> loginRepositoryProvider, Provider<Logger> loggerProvider,
      Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider) {
    this.photoRepositoryProvider = photoRepositoryProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.loginRepositoryProvider = loginRepositoryProvider;
    this.loggerProvider = loggerProvider;
    this.synchronizationWorkerManagerProvider = synchronizationWorkerManagerProvider;
  }

  @Override
  public ProfileViewModel get() {
    return newInstance(photoRepositoryProvider.get(), userRepositoryProvider.get(), loginRepositoryProvider.get(), loggerProvider.get(), synchronizationWorkerManagerProvider.get());
  }

  public static ProfileViewModel_Factory create(
      Provider<Repository<Bitmap>> photoRepositoryProvider,
      Provider<Repository<User>> userRepositoryProvider,
      Provider<LoginRepository> loginRepositoryProvider, Provider<Logger> loggerProvider,
      Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider) {
    return new ProfileViewModel_Factory(photoRepositoryProvider, userRepositoryProvider, loginRepositoryProvider, loggerProvider, synchronizationWorkerManagerProvider);
  }

  public static ProfileViewModel newInstance(Repository<Bitmap> photoRepository,
      Repository<User> userRepository, LoginRepository loginRepository, Logger logger,
      SynchronizationWorkerManager synchronizationWorkerManager) {
    return new ProfileViewModel(photoRepository, userRepository, loginRepository, logger, synchronizationWorkerManager);
  }
}
