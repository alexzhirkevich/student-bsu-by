// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.repo;

import android.content.Context;
import android.content.SharedPreferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.workers.SynchronizationWorkerManager;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SettingsRepository_Factory implements Factory<SettingsRepository> {
  private final Provider<SharedPreferences> preferencesProvider;

  private final Provider<Context> contextProvider;

  private final Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider;

  public SettingsRepository_Factory(Provider<SharedPreferences> preferencesProvider,
      Provider<Context> contextProvider,
      Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider) {
    this.preferencesProvider = preferencesProvider;
    this.contextProvider = contextProvider;
    this.synchronizationWorkerManagerProvider = synchronizationWorkerManagerProvider;
  }

  @Override
  public SettingsRepository get() {
    return newInstance(preferencesProvider.get(), contextProvider.get(), synchronizationWorkerManagerProvider.get());
  }

  public static SettingsRepository_Factory create(Provider<SharedPreferences> preferencesProvider,
      Provider<Context> contextProvider,
      Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider) {
    return new SettingsRepository_Factory(preferencesProvider, contextProvider, synchronizationWorkerManagerProvider);
  }

  public static SettingsRepository newInstance(SharedPreferences preferences, Context context,
      SynchronizationWorkerManager synchronizationWorkerManager) {
    return new SettingsRepository(preferences, context, synchronizationWorkerManager);
  }
}
