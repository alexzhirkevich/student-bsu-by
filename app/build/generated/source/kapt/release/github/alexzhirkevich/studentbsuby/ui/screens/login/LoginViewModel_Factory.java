// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.ui.screens.login;

import android.content.res.Resources;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.repo.LoginRepository;
import github.alexzhirkevich.studentbsuby.repo.SettingsRepository;
import github.alexzhirkevich.studentbsuby.util.logger.Logger;
import github.alexzhirkevich.studentbsuby.workers.SynchronizationWorkerManager;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<LoginRepository> loginRepositoryProvider;

  private final Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider;

  private final Provider<SettingsRepository> settingsRepositoryProvider;

  private final Provider<Resources> resourcesProvider;

  private final Provider<Logger> loggerProvider;

  public LoginViewModel_Factory(Provider<LoginRepository> loginRepositoryProvider,
      Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider,
      Provider<SettingsRepository> settingsRepositoryProvider,
      Provider<Resources> resourcesProvider, Provider<Logger> loggerProvider) {
    this.loginRepositoryProvider = loginRepositoryProvider;
    this.synchronizationWorkerManagerProvider = synchronizationWorkerManagerProvider;
    this.settingsRepositoryProvider = settingsRepositoryProvider;
    this.resourcesProvider = resourcesProvider;
    this.loggerProvider = loggerProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(loginRepositoryProvider.get(), synchronizationWorkerManagerProvider.get(), settingsRepositoryProvider.get(), resourcesProvider.get(), loggerProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<LoginRepository> loginRepositoryProvider,
      Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider,
      Provider<SettingsRepository> settingsRepositoryProvider,
      Provider<Resources> resourcesProvider, Provider<Logger> loggerProvider) {
    return new LoginViewModel_Factory(loginRepositoryProvider, synchronizationWorkerManagerProvider, settingsRepositoryProvider, resourcesProvider, loggerProvider);
  }

  public static LoginViewModel newInstance(LoginRepository loginRepository,
      SynchronizationWorkerManager synchronizationWorkerManager,
      SettingsRepository settingsRepository, Resources resources, Logger logger) {
    return new LoginViewModel(loginRepository, synchronizationWorkerManager, settingsRepository, resources, logger);
  }
}
