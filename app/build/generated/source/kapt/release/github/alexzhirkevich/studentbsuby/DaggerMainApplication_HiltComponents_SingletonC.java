// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.net.Uri;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWorkerFactory;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.hilt.work.WorkerAssistedFactory;
import androidx.hilt.work.WorkerFactoryModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import androidx.work.WorkManager;
import androidx.work.WorkerParameters;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import github.alexzhirkevich.studentbsuby.api.LoginApi;
import github.alexzhirkevich.studentbsuby.api.PaidServicesApi;
import github.alexzhirkevich.studentbsuby.api.ProfileApi;
import github.alexzhirkevich.studentbsuby.api.TimetableApi;
import github.alexzhirkevich.studentbsuby.dao.AppDatabase;
import github.alexzhirkevich.studentbsuby.dao.HostelDao;
import github.alexzhirkevich.studentbsuby.dao.LessonsDao;
import github.alexzhirkevich.studentbsuby.dao.NewsDao;
import github.alexzhirkevich.studentbsuby.dao.PaidServicesDao;
import github.alexzhirkevich.studentbsuby.dao.SubjectsDao;
import github.alexzhirkevich.studentbsuby.dao.UsersDao;
import github.alexzhirkevich.studentbsuby.di.AppModule;
import github.alexzhirkevich.studentbsuby.di.AppModule_ProvideCaptureRecognizerFactory;
import github.alexzhirkevich.studentbsuby.di.AppModule_ProvideEncryptedSharedPreferencesFactory;
import github.alexzhirkevich.studentbsuby.di.AppModule_ProvideLoggerFactory;
import github.alexzhirkevich.studentbsuby.di.AppModule_ProvideResourcesFactory;
import github.alexzhirkevich.studentbsuby.di.AppModule_ProvideSharedPreferencesFactory;
import github.alexzhirkevich.studentbsuby.di.AppModule_ProvideUsernameProviderFactory;
import github.alexzhirkevich.studentbsuby.di.AppModule_ProvideWorkManagerFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvideBaseUrlFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvideCookieCleanerFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvideHttpClientFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvideLoginApiFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvidePaidServicesApiFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvideProfileApiFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvideRetrofitFactory;
import github.alexzhirkevich.studentbsuby.di.RetrofitModule_ProvideTimetableApiFactory;
import github.alexzhirkevich.studentbsuby.di.RoomModule;
import github.alexzhirkevich.studentbsuby.di.RoomModule_ProvideDatabaseFactory;
import github.alexzhirkevich.studentbsuby.di.RoomModule_ProvideHostelDaoFactory;
import github.alexzhirkevich.studentbsuby.di.RoomModule_ProvideLessonsDaoFactory;
import github.alexzhirkevich.studentbsuby.di.RoomModule_ProvideNewsDaoFactory;
import github.alexzhirkevich.studentbsuby.di.RoomModule_ProvidePaidServicesDaoFactory;
import github.alexzhirkevich.studentbsuby.di.RoomModule_ProvideSubjectsDaoFactory;
import github.alexzhirkevich.studentbsuby.di.RoomModule_ProvideUsersDaoFactory;
import github.alexzhirkevich.studentbsuby.repo.CurrentSemesterRepository;
import github.alexzhirkevich.studentbsuby.repo.HostelRepository;
import github.alexzhirkevich.studentbsuby.repo.LoginRepository;
import github.alexzhirkevich.studentbsuby.repo.NewsRepository;
import github.alexzhirkevich.studentbsuby.repo.PaidServicesRepository;
import github.alexzhirkevich.studentbsuby.repo.PhotoRepository;
import github.alexzhirkevich.studentbsuby.repo.SettingsRepository;
import github.alexzhirkevich.studentbsuby.repo.SubjectsRepository;
import github.alexzhirkevich.studentbsuby.repo.TimetableRepository;
import github.alexzhirkevich.studentbsuby.repo.UserRepository;
import github.alexzhirkevich.studentbsuby.repo.UsernameProvider;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.ProfileViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.about.AboutViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.about.AboutViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.hostel.HostelViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.hostel.HostelViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.news.NewsViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.news.NewsViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.paidservices.PaidServicesViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.paidservices.PaidServicesViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.subjects.SubjectsViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.subjects.SubjectsViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.timetable.TimetableViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.drawer.timetable.TimetableViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.login.LoginViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.ui.screens.settings.SettingsViewModel;
import github.alexzhirkevich.studentbsuby.ui.screens.settings.SettingsViewModel_HiltModules_KeyModule_ProvideFactory;
import github.alexzhirkevich.studentbsuby.util.CaptchaRecognizer;
import github.alexzhirkevich.studentbsuby.util.LoginCookieManager;
import github.alexzhirkevich.studentbsuby.util.logger.Logger;
import github.alexzhirkevich.studentbsuby.workers.SynchronizationWorker;
import github.alexzhirkevich.studentbsuby.workers.SynchronizationWorkerManager;
import github.alexzhirkevich.studentbsuby.workers.SynchronizationWorker_AssistedFactory;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMainApplication_HiltComponents_SingletonC extends MainApplication_HiltComponents.SingletonC {
  private final AppModule appModule;

  private final ApplicationContextModule applicationContextModule;

  private final RetrofitModule retrofitModule;

  private final RoomModule roomModule;

  private final DaggerMainApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<OkHttpClient> provideHttpClientProvider;

  private Provider<Uri> provideBaseUrlProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ProfileApi> provideProfileApiProvider;

  private Provider<AppDatabase> provideDatabaseProvider;

  private Provider<HostelDao> provideHostelDaoProvider;

  private Provider<TimetableApi> provideTimetableApiProvider;

  private Provider<LessonsDao> provideLessonsDaoProvider;

  private Provider<LoginApi> provideLoginApiProvider;

  private Provider<CaptchaRecognizer> provideCaptureRecognizerProvider;

  private Provider<LoginCookieManager> provideCookieCleanerProvider;

  private Provider<LoginRepository> loginRepositoryProvider;

  private Provider<SynchronizationWorker_AssistedFactory> synchronizationWorker_AssistedFactoryProvider;

  private Provider<Logger> provideLoggerProvider;

  private Provider<SynchronizationWorkerManager> synchronizationWorkerManagerProvider;

  private Provider<NewsDao> provideNewsDaoProvider;

  private Provider<PaidServicesApi> providePaidServicesApiProvider;

  private Provider<PaidServicesDao> providePaidServicesDaoProvider;

  private Provider<UsersDao> provideUsersDaoProvider;

  private Provider<SubjectsDao> provideSubjectsDaoProvider;

  private Provider<SubjectsRepository> subjectsRepositoryProvider;

  private DaggerMainApplication_HiltComponents_SingletonC(AppModule appModuleParam,
      ApplicationContextModule applicationContextModuleParam, RetrofitModule retrofitModuleParam,
      RoomModule roomModuleParam) {
    this.appModule = appModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
    this.retrofitModule = retrofitModuleParam;
    this.roomModule = roomModuleParam;
    initialize(appModuleParam, applicationContextModuleParam, retrofitModuleParam, roomModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private SharedPreferences sharedPreferences() {
    return AppModule_ProvideSharedPreferencesFactory.provideSharedPreferences(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private UsernameProvider usernameProvider() {
    return AppModule_ProvideUsernameProviderFactory.provideUsernameProvider(appModule, sharedPreferences());
  }

  private OkHttpClient okHttpClient() {
    return RetrofitModule_ProvideHttpClientFactory.provideHttpClient(retrofitModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private Retrofit retrofit() {
    return RetrofitModule_ProvideRetrofitFactory.provideRetrofit(retrofitModule, provideHttpClientProvider.get(), provideBaseUrlProvider.get());
  }

  private ProfileApi profileApi() {
    return RetrofitModule_ProvideProfileApiFactory.provideProfileApi(retrofitModule, provideRetrofitProvider.get());
  }

  private AppDatabase appDatabase() {
    return RoomModule_ProvideDatabaseFactory.provideDatabase(roomModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private HostelDao hostelDao() {
    return RoomModule_ProvideHostelDaoFactory.provideHostelDao(roomModule, provideDatabaseProvider.get());
  }

  private HostelRepository hostelRepository() {
    return new HostelRepository(usernameProvider(), provideProfileApiProvider.get(), provideHostelDaoProvider.get(), sharedPreferences());
  }

  private TimetableApi timetableApi() {
    return RetrofitModule_ProvideTimetableApiFactory.provideTimetableApi(retrofitModule, provideRetrofitProvider.get());
  }

  private LessonsDao lessonsDao() {
    return RoomModule_ProvideLessonsDaoFactory.provideLessonsDao(roomModule, provideDatabaseProvider.get());
  }

  private TimetableRepository timetableRepository() {
    return new TimetableRepository(usernameProvider(), provideTimetableApiProvider.get(), provideLessonsDaoProvider.get());
  }

  private LoginApi loginApi() {
    return RetrofitModule_ProvideLoginApiFactory.provideLoginApi(retrofitModule, provideRetrofitProvider.get());
  }

  private SharedPreferences encryptedSharedPreferences() {
    return AppModule_ProvideEncryptedSharedPreferencesFactory.provideEncryptedSharedPreferences(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private LoginRepository loginRepository() {
    return new LoginRepository(provideLoginApiProvider.get(), encryptedSharedPreferences(), sharedPreferences(), provideCaptureRecognizerProvider.get(), provideCookieCleanerProvider.get());
  }

  private SynchronizationWorker synchronizationWorker(Context context,
      WorkerParameters parameters) {
    return new SynchronizationWorker(context, parameters, hostelRepository(), timetableRepository(), loginRepositoryProvider.get());
  }

  private SynchronizationWorker_AssistedFactory synchronizationWorker_AssistedFactory() {
    return new SynchronizationWorker_AssistedFactory() {
      @Override
      public SynchronizationWorker create(Context context, WorkerParameters parameters) {
        return singletonC.synchronizationWorker(context, parameters);
      }
    };
  }

  private Map<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>> mapOfStringAndProviderOfWorkerAssistedFactoryOf(
      ) {
    return Collections.<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>>singletonMap("github.alexzhirkevich.studentbsuby.workers.SynchronizationWorker", (Provider) synchronizationWorker_AssistedFactoryProvider);
  }

  private Logger logger() {
    return AppModule_ProvideLoggerFactory.provideLogger(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private WorkManager workManager() {
    return AppModule_ProvideWorkManagerFactory.provideWorkManager(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private SynchronizationWorkerManager synchronizationWorkerManager() {
    return new SynchronizationWorkerManager(workManager());
  }

  private Resources resources() {
    return AppModule_ProvideResourcesFactory.provideResources(appModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private NewsDao newsDao() {
    return RoomModule_ProvideNewsDaoFactory.provideNewsDao(roomModule, provideDatabaseProvider.get());
  }

  private PaidServicesApi paidServicesApi() {
    return RetrofitModule_ProvidePaidServicesApiFactory.providePaidServicesApi(retrofitModule, provideRetrofitProvider.get());
  }

  private PaidServicesDao paidServicesDao() {
    return RoomModule_ProvidePaidServicesDaoFactory.providePaidServicesDao(roomModule, provideDatabaseProvider.get());
  }

  private UsersDao usersDao() {
    return RoomModule_ProvideUsersDaoFactory.provideUsersDao(roomModule, provideDatabaseProvider.get());
  }

  private SubjectsDao subjectsDao() {
    return RoomModule_ProvideSubjectsDaoFactory.provideSubjectsDao(roomModule, provideDatabaseProvider.get());
  }

  private SubjectsRepository subjectsRepository() {
    return new SubjectsRepository(usernameProvider(), provideProfileApiProvider.get(), provideSubjectsDaoProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final RetrofitModule retrofitModuleParam, final RoomModule roomModuleParam) {
    this.provideHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 3));
    this.provideBaseUrlProvider = DoubleCheck.provider(new SwitchingProvider<Uri>(singletonC, 4));
    this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 2));
    this.provideProfileApiProvider = DoubleCheck.provider(new SwitchingProvider<ProfileApi>(singletonC, 1));
    this.provideDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonC, 6));
    this.provideHostelDaoProvider = DoubleCheck.provider(new SwitchingProvider<HostelDao>(singletonC, 5));
    this.provideTimetableApiProvider = DoubleCheck.provider(new SwitchingProvider<TimetableApi>(singletonC, 7));
    this.provideLessonsDaoProvider = DoubleCheck.provider(new SwitchingProvider<LessonsDao>(singletonC, 8));
    this.provideLoginApiProvider = DoubleCheck.provider(new SwitchingProvider<LoginApi>(singletonC, 10));
    this.provideCaptureRecognizerProvider = DoubleCheck.provider(new SwitchingProvider<CaptchaRecognizer>(singletonC, 11));
    this.provideCookieCleanerProvider = DoubleCheck.provider(new SwitchingProvider<LoginCookieManager>(singletonC, 12));
    this.loginRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<LoginRepository>(singletonC, 9));
    this.synchronizationWorker_AssistedFactoryProvider = new SwitchingProvider<>(singletonC, 0);
    this.provideLoggerProvider = DoubleCheck.provider(new SwitchingProvider<Logger>(singletonC, 13));
    this.synchronizationWorkerManagerProvider = DoubleCheck.provider(new SwitchingProvider<SynchronizationWorkerManager>(singletonC, 14));
    this.provideNewsDaoProvider = DoubleCheck.provider(new SwitchingProvider<NewsDao>(singletonC, 15));
    this.providePaidServicesApiProvider = DoubleCheck.provider(new SwitchingProvider<PaidServicesApi>(singletonC, 16));
    this.providePaidServicesDaoProvider = DoubleCheck.provider(new SwitchingProvider<PaidServicesDao>(singletonC, 17));
    this.provideUsersDaoProvider = DoubleCheck.provider(new SwitchingProvider<UsersDao>(singletonC, 18));
    this.provideSubjectsDaoProvider = DoubleCheck.provider(new SwitchingProvider<SubjectsDao>(singletonC, 20));
    this.subjectsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<SubjectsRepository>(singletonC, 19));
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public HiltWorkerFactory hiltWorkerFactory() {
    return WorkerFactoryModule_ProvideFactoryFactory.provideFactory(mapOfStringAndProviderOfWorkerAssistedFactoryOf());
  }

  @Override
  public void injectMainApplication(MainApplication mainApplication) {
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private RetrofitModule retrofitModule;

    private RoomModule roomModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    public Builder roomModule(RoomModule roomModule) {
      this.roomModule = Preconditions.checkNotNull(roomModule);
      return this;
    }

    public MainApplication_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (retrofitModule == null) {
        this.retrofitModule = new RetrofitModule();
      }
      if (roomModule == null) {
        this.roomModule = new RoomModule();
      }
      return new DaggerMainApplication_HiltComponents_SingletonC(appModule, applicationContextModule, retrofitModule, roomModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MainApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MainApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements MainApplication_HiltComponents.ActivityC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MainApplication_HiltComponents.FragmentC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MainApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MainApplication_HiltComponents.ViewC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MainApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MainApplication_HiltComponents.ServiceC.Builder {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MainApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MainApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MainApplication_HiltComponents.FragmentC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MainApplication_HiltComponents.ViewC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MainApplication_HiltComponents.ActivityC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(9).add(AboutViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HostelViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NewsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PaidServicesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SettingsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SubjectsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TimetableViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }
  }

  private static final class ViewModelCImpl extends MainApplication_HiltComponents.ViewModelC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AboutViewModel> aboutViewModelProvider;

    private Provider<HostelViewModel> hostelViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<NewsViewModel> newsViewModelProvider;

    private Provider<PaidServicesViewModel> paidServicesViewModelProvider;

    private Provider<ProfileViewModel> profileViewModelProvider;

    private Provider<SettingsViewModel> settingsViewModelProvider;

    private Provider<SubjectsViewModel> subjectsViewModelProvider;

    private Provider<TimetableViewModel> timetableViewModelProvider;

    private ViewModelCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private AboutViewModel aboutViewModel() {
      return new AboutViewModel(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));
    }

    private HostelViewModel hostelViewModel() {
      return new HostelViewModel(singletonC.hostelRepository(), ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.provideLoggerProvider.get());
    }

    private SettingsRepository settingsRepository() {
      return new SettingsRepository(singletonC.sharedPreferences(), ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.synchronizationWorkerManagerProvider.get());
    }

    private LoginViewModel loginViewModel() {
      return new LoginViewModel(singletonC.loginRepositoryProvider.get(), singletonC.synchronizationWorkerManagerProvider.get(), settingsRepository(), singletonC.resources(), singletonC.provideLoggerProvider.get());
    }

    private NewsRepository newsRepository() {
      return new NewsRepository(singletonC.provideProfileApiProvider.get(), singletonC.provideNewsDaoProvider.get(), singletonC.provideBaseUrlProvider.get());
    }

    private NewsViewModel newsViewModel() {
      return new NewsViewModel(newsRepository(), singletonC.provideLoggerProvider.get(), singletonC.provideHttpClientProvider.get(), singletonC.provideCookieCleanerProvider.get());
    }

    private PaidServicesRepository paidServicesRepository() {
      return new PaidServicesRepository(singletonC.usernameProvider(), singletonC.providePaidServicesApiProvider.get(), singletonC.providePaidServicesDaoProvider.get(), singletonC.resources());
    }

    private PaidServicesViewModel paidServicesViewModel() {
      return new PaidServicesViewModel(paidServicesRepository(), ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.provideLoggerProvider.get());
    }

    private PhotoRepository photoRepository() {
      return new PhotoRepository(singletonC.provideProfileApiProvider.get(), singletonC.usernameProvider(), ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));
    }

    private UserRepository userRepository() {
      return new UserRepository(singletonC.provideUsersDaoProvider.get(), singletonC.provideProfileApiProvider.get(), singletonC.usernameProvider());
    }

    private ProfileViewModel profileViewModel() {
      return new ProfileViewModel(photoRepository(), userRepository(), singletonC.loginRepositoryProvider.get(), singletonC.provideLoggerProvider.get(), singletonC.synchronizationWorkerManagerProvider.get());
    }

    private SettingsViewModel settingsViewModel() {
      return new SettingsViewModel(settingsRepository(), singletonC.provideLoggerProvider.get());
    }

    private CurrentSemesterRepository currentSemesterRepository() {
      return new CurrentSemesterRepository(singletonC.usernameProvider(), singletonC.provideProfileApiProvider.get(), singletonC.sharedPreferences());
    }

    private SubjectsViewModel subjectsViewModel() {
      return new SubjectsViewModel(singletonC.subjectsRepositoryProvider.get(), currentSemesterRepository(), singletonC.provideLoggerProvider.get());
    }

    private TimetableViewModel timetableViewModel() {
      return new TimetableViewModel(singletonC.timetableRepository(), singletonC.provideLoggerProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.aboutViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.hostelViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.newsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.paidServicesViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.profileViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
      this.settingsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
      this.subjectsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 7);
      this.timetableViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 8);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(9).put("github.alexzhirkevich.studentbsuby.ui.screens.drawer.about.AboutViewModel", (Provider) aboutViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.drawer.hostel.HostelViewModel", (Provider) hostelViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.login.LoginViewModel", (Provider) loginViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.drawer.news.NewsViewModel", (Provider) newsViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.drawer.paidservices.PaidServicesViewModel", (Provider) paidServicesViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.drawer.ProfileViewModel", (Provider) profileViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.settings.SettingsViewModel", (Provider) settingsViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.drawer.subjects.SubjectsViewModel", (Provider) subjectsViewModelProvider).put("github.alexzhirkevich.studentbsuby.ui.screens.drawer.timetable.TimetableViewModel", (Provider) timetableViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // github.alexzhirkevich.studentbsuby.ui.screens.drawer.about.AboutViewModel 
          return (T) viewModelCImpl.aboutViewModel();

          case 1: // github.alexzhirkevich.studentbsuby.ui.screens.drawer.hostel.HostelViewModel 
          return (T) viewModelCImpl.hostelViewModel();

          case 2: // github.alexzhirkevich.studentbsuby.ui.screens.login.LoginViewModel 
          return (T) viewModelCImpl.loginViewModel();

          case 3: // github.alexzhirkevich.studentbsuby.ui.screens.drawer.news.NewsViewModel 
          return (T) viewModelCImpl.newsViewModel();

          case 4: // github.alexzhirkevich.studentbsuby.ui.screens.drawer.paidservices.PaidServicesViewModel 
          return (T) viewModelCImpl.paidServicesViewModel();

          case 5: // github.alexzhirkevich.studentbsuby.ui.screens.drawer.ProfileViewModel 
          return (T) viewModelCImpl.profileViewModel();

          case 6: // github.alexzhirkevich.studentbsuby.ui.screens.settings.SettingsViewModel 
          return (T) viewModelCImpl.settingsViewModel();

          case 7: // github.alexzhirkevich.studentbsuby.ui.screens.drawer.subjects.SubjectsViewModel 
          return (T) viewModelCImpl.subjectsViewModel();

          case 8: // github.alexzhirkevich.studentbsuby.ui.screens.drawer.timetable.TimetableViewModel 
          return (T) viewModelCImpl.timetableViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MainApplication_HiltComponents.ActivityRetainedC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerMainApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MainApplication_HiltComponents.ServiceC {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMainApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerMainApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerMainApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // github.alexzhirkevich.studentbsuby.workers.SynchronizationWorker_AssistedFactory 
        return (T) singletonC.synchronizationWorker_AssistedFactory();

        case 1: // github.alexzhirkevich.studentbsuby.api.ProfileApi 
        return (T) singletonC.profileApi();

        case 2: // retrofit2.Retrofit 
        return (T) singletonC.retrofit();

        case 3: // okhttp3.OkHttpClient 
        return (T) singletonC.okHttpClient();

        case 4: // android.net.Uri 
        return (T) RetrofitModule_ProvideBaseUrlFactory.provideBaseUrl(singletonC.retrofitModule);

        case 5: // github.alexzhirkevich.studentbsuby.dao.HostelDao 
        return (T) singletonC.hostelDao();

        case 6: // github.alexzhirkevich.studentbsuby.dao.AppDatabase 
        return (T) singletonC.appDatabase();

        case 7: // github.alexzhirkevich.studentbsuby.api.TimetableApi 
        return (T) singletonC.timetableApi();

        case 8: // github.alexzhirkevich.studentbsuby.dao.LessonsDao 
        return (T) singletonC.lessonsDao();

        case 9: // github.alexzhirkevich.studentbsuby.repo.LoginRepository 
        return (T) singletonC.loginRepository();

        case 10: // github.alexzhirkevich.studentbsuby.api.LoginApi 
        return (T) singletonC.loginApi();

        case 11: // github.alexzhirkevich.studentbsuby.util.CaptchaRecognizer 
        return (T) AppModule_ProvideCaptureRecognizerFactory.provideCaptureRecognizer(singletonC.appModule);

        case 12: // github.alexzhirkevich.studentbsuby.util.LoginCookieManager 
        return (T) RetrofitModule_ProvideCookieCleanerFactory.provideCookieCleaner(singletonC.retrofitModule);

        case 13: // github.alexzhirkevich.studentbsuby.util.logger.Logger 
        return (T) singletonC.logger();

        case 14: // github.alexzhirkevich.studentbsuby.workers.SynchronizationWorkerManager 
        return (T) singletonC.synchronizationWorkerManager();

        case 15: // github.alexzhirkevich.studentbsuby.dao.NewsDao 
        return (T) singletonC.newsDao();

        case 16: // github.alexzhirkevich.studentbsuby.api.PaidServicesApi 
        return (T) singletonC.paidServicesApi();

        case 17: // github.alexzhirkevich.studentbsuby.dao.PaidServicesDao 
        return (T) singletonC.paidServicesDao();

        case 18: // github.alexzhirkevich.studentbsuby.dao.UsersDao 
        return (T) singletonC.usersDao();

        case 19: // github.alexzhirkevich.studentbsuby.repo.SubjectsRepository 
        return (T) singletonC.subjectsRepository();

        case 20: // github.alexzhirkevich.studentbsuby.dao.SubjectsDao 
        return (T) singletonC.subjectsDao();

        default: throw new AssertionError(id);
      }
    }
  }
}
