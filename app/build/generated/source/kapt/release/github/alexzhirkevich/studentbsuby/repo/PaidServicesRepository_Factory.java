// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.repo;

import android.content.res.Resources;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.api.PaidServicesApi;
import github.alexzhirkevich.studentbsuby.dao.PaidServicesDao;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PaidServicesRepository_Factory implements Factory<PaidServicesRepository> {
  private final Provider<UsernameProvider> usernameProvider;

  private final Provider<PaidServicesApi> apiProvider;

  private final Provider<PaidServicesDao> daoProvider;

  private final Provider<Resources> resourcesProvider;

  public PaidServicesRepository_Factory(Provider<UsernameProvider> usernameProvider,
      Provider<PaidServicesApi> apiProvider, Provider<PaidServicesDao> daoProvider,
      Provider<Resources> resourcesProvider) {
    this.usernameProvider = usernameProvider;
    this.apiProvider = apiProvider;
    this.daoProvider = daoProvider;
    this.resourcesProvider = resourcesProvider;
  }

  @Override
  public PaidServicesRepository get() {
    return newInstance(usernameProvider.get(), apiProvider.get(), daoProvider.get(), resourcesProvider.get());
  }

  public static PaidServicesRepository_Factory create(Provider<UsernameProvider> usernameProvider,
      Provider<PaidServicesApi> apiProvider, Provider<PaidServicesDao> daoProvider,
      Provider<Resources> resourcesProvider) {
    return new PaidServicesRepository_Factory(usernameProvider, apiProvider, daoProvider, resourcesProvider);
  }

  public static PaidServicesRepository newInstance(UsernameProvider usernameProvider,
      PaidServicesApi api, PaidServicesDao dao, Resources resources) {
    return new PaidServicesRepository(usernameProvider, api, dao, resources);
  }
}
