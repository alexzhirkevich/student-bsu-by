// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.repo;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.api.TimetableApi;
import github.alexzhirkevich.studentbsuby.dao.LessonsDao;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TimetableRepository_Factory implements Factory<TimetableRepository> {
  private final Provider<UsernameProvider> usernameProvider;

  private final Provider<TimetableApi> timetableApiProvider;

  private final Provider<LessonsDao> lessonsDaoProvider;

  public TimetableRepository_Factory(Provider<UsernameProvider> usernameProvider,
      Provider<TimetableApi> timetableApiProvider, Provider<LessonsDao> lessonsDaoProvider) {
    this.usernameProvider = usernameProvider;
    this.timetableApiProvider = timetableApiProvider;
    this.lessonsDaoProvider = lessonsDaoProvider;
  }

  @Override
  public TimetableRepository get() {
    return newInstance(usernameProvider.get(), timetableApiProvider.get(), lessonsDaoProvider.get());
  }

  public static TimetableRepository_Factory create(Provider<UsernameProvider> usernameProvider,
      Provider<TimetableApi> timetableApiProvider, Provider<LessonsDao> lessonsDaoProvider) {
    return new TimetableRepository_Factory(usernameProvider, timetableApiProvider, lessonsDaoProvider);
  }

  public static TimetableRepository newInstance(UsernameProvider usernameProvider,
      TimetableApi timetableApi, LessonsDao lessonsDao) {
    return new TimetableRepository(usernameProvider, timetableApi, lessonsDao);
  }
}
