// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import github.alexzhirkevich.studentbsuby.dao.AppDatabase;
import github.alexzhirkevich.studentbsuby.dao.NewsDao;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvideNewsDaoFactory implements Factory<NewsDao> {
  private final RoomModule module;

  private final Provider<AppDatabase> appDatabaseProvider;

  public RoomModule_ProvideNewsDaoFactory(RoomModule module,
      Provider<AppDatabase> appDatabaseProvider) {
    this.module = module;
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public NewsDao get() {
    return provideNewsDao(module, appDatabaseProvider.get());
  }

  public static RoomModule_ProvideNewsDaoFactory create(RoomModule module,
      Provider<AppDatabase> appDatabaseProvider) {
    return new RoomModule_ProvideNewsDaoFactory(module, appDatabaseProvider);
  }

  public static NewsDao provideNewsDao(RoomModule instance, AppDatabase appDatabase) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsDao(appDatabase));
  }
}
