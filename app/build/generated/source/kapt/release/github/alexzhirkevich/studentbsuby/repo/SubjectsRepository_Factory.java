// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.repo;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import github.alexzhirkevich.studentbsuby.api.ProfileApi;
import github.alexzhirkevich.studentbsuby.dao.SubjectsDao;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SubjectsRepository_Factory implements Factory<SubjectsRepository> {
  private final Provider<UsernameProvider> usernameProvider;

  private final Provider<ProfileApi> profileApiProvider;

  private final Provider<SubjectsDao> subjectsDaoProvider;

  public SubjectsRepository_Factory(Provider<UsernameProvider> usernameProvider,
      Provider<ProfileApi> profileApiProvider, Provider<SubjectsDao> subjectsDaoProvider) {
    this.usernameProvider = usernameProvider;
    this.profileApiProvider = profileApiProvider;
    this.subjectsDaoProvider = subjectsDaoProvider;
  }

  @Override
  public SubjectsRepository get() {
    return newInstance(usernameProvider.get(), profileApiProvider.get(), subjectsDaoProvider.get());
  }

  public static SubjectsRepository_Factory create(Provider<UsernameProvider> usernameProvider,
      Provider<ProfileApi> profileApiProvider, Provider<SubjectsDao> subjectsDaoProvider) {
    return new SubjectsRepository_Factory(usernameProvider, profileApiProvider, subjectsDaoProvider);
  }

  public static SubjectsRepository newInstance(UsernameProvider usernameProvider,
      ProfileApi profileApi, SubjectsDao subjectsDao) {
    return new SubjectsRepository(usernameProvider, profileApi, subjectsDao);
  }
}
