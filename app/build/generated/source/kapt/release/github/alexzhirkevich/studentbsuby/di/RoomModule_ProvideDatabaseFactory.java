// Generated by Dagger (https://dagger.dev).
package github.alexzhirkevich.studentbsuby.di;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import github.alexzhirkevich.studentbsuby.dao.AppDatabase;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvideDatabaseFactory implements Factory<AppDatabase> {
  private final RoomModule module;

  private final Provider<Context> contextProvider;

  public RoomModule_ProvideDatabaseFactory(RoomModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public AppDatabase get() {
    return provideDatabase(module, contextProvider.get());
  }

  public static RoomModule_ProvideDatabaseFactory create(RoomModule module,
      Provider<Context> contextProvider) {
    return new RoomModule_ProvideDatabaseFactory(module, contextProvider);
  }

  public static AppDatabase provideDatabase(RoomModule instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideDatabase(context));
  }
}
